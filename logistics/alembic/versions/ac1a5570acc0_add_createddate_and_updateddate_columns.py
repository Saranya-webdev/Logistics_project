"""Add created_at and updated_at columns

Revision ID: ac1a5570acc0
Revises: ae906cabb074
Create Date: 2024-12-30 10:20:58.606200
"""
from typing import Sequence, Union
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mysql

# revision identifiers, used by Alembic.
revision: str = 'ac1a5570acc0'
down_revision: Union[str, None] = 'ae906cabb074'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None

def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('customer', 'customer_mobile',
               existing_type=mysql.BIGINT(),
               type_=sa.Integer(),
               existing_nullable=True)
    
    # Alter 'created_at' and 'updated_at' columns to be non-nullable with default values
    op.alter_column('customer', 'created_at',
               existing_type=mysql.DATETIME(),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    
    op.alter_column('customer', 'updated_at',
               existing_type=mysql.DATETIME(),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP'))
    # ### end Alembic commands ###

def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('customer', 'updated_at',
               existing_type=mysql.DATETIME(),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP'))
    
    op.alter_column('customer', 'created_at',
               existing_type=mysql.DATETIME(),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    
    op.alter_column('customer', 'customer_mobile',
               existing_type=sa.Integer(),
               type_=mysql.BIGINT(),
               existing_nullable=True)
    # ### end Alembic commands ###
